generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  holdings      Holding[]
  // transactions  Transaction[]
 
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  @@map("users")
}
 
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Stock {
  ticker        String          @id @db.VarChar(6)
  name          String
  market        String
  holdings      Holding[]
  // transactions  Transaction[]

  @@map("stocks")
}

model Holding {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @map("user_id")
  stock         Stock     @relation(fields: [stockTicker], references: [ticker], onDelete: Cascade)
  stockTicker   String    @map("stock_ticker")
  quantity      Int
  price         Int
  transactAt    DateTime?

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("holdings")
}


// model Transaction {
//   id              String        @id @default(cuid())
//   user            User          @relation(fields: [userId], references: [id])
//   userId          String        @map("user_id")
//   stock           Stock         @relation(fields: [stockTicker], references: [ticker])
//   stockTicker     String        @map("stock_ticker") 
//   quantity        Int
//   price           Int
//   type            TransactionType
//   transactionAt   DateTime?     @map("transaction_at")
  
//   createdAt       DateTime      @default(now()) @map("created_at")
//   updatedAt       DateTime?     @updatedAt @map("updated_at")
//   deletedAt       DateTime?     @map("deleted_at")

//   @@map("transactions")
// }

// enum TransactionType {
//   BUY
//   SELL
// }